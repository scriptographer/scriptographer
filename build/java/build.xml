<?xml version="1.0"?>
<project name="Scriptographer" default="usage" basedir=".">
	<!-- =================================================================== -->
	<!-- Initializes some variables                                          -->
	<!-- =================================================================== -->
	<target name="init">
		<property name="Name" value="Scriptographer"/>
		<property name="version.major" value ="3" />
		<property name="version.minor" value="0" />
		<property name="version" value="${version.major}.${version.minor}"/>
		<property name="project" value="scriptographer"/>
		<tstamp>
			<!-- Get current year -->
			<format property="now" pattern="yyyy"/>
			<format property="date" pattern="yyyy_MM_dd"/>
		</tstamp>
		<property name="year" value="2001-${now}"/>

		<property environment="env"/>

		<property name="jar.name" value="${project}"/>
		<property name="package.name" value="${project}-${version}"/>

		<property name="build.debug" value="on"/>
		<property name="build.optimize" value="off"/>
		<property name="build.version" value="1.5"/>
		<property name="build.deprecation" value="off"/>

		<property name="project.dir" location="../.."/>
		<!-- Sources -->
		<property name="src.java" location="${project.dir}/src/java"/>
		<property name="src.jni" location="${project.dir}/src/native/jni"/>
		<property name="src.js" location="${project.dir}/src/js"/>

		<property name="build.dir" location="${project.dir}/build"/>
		<property name="build.java" location="${build.dir}/java"/>
		<!-- build.lib contains libraries for building, not built libs.
			Built libs go to target.lib -->
		<property name="build.lib" location="${build.java}/lib"/>
		<property name="build.mac" location="${build.dir}/mac"/>
		<property name="build.win" location="${build.dir}/win"/>

		<loadproperties srcfile="build.number"/>

		<condition property="build.platform.mac">
	    	<os family="mac"/>
		</condition>

		<condition property="build.platform.win">
	    	<os family="windows"/>
		</condition>

		<!-- The places for the built results -->
		<property name="target.java" value="${build.java}/build"/>
		<property name="target.lib" value="${target.java}/lib"/>
		<property name="target.classes" value="${target.java}/classes"/>
		<property name="target.packages" value="${build.dir}/packages"/>

		<path id="target.classpath">
			<fileset dir="${target.lib}">
				<include name="**/*.jar" />
				<exclude name="**/scriptographer*.jar" />
			</fileset>
		</path>

		<property name="docs.dir" value="${project.dir}/docs"/>
		<property name="docs.dir.api" value="${docs.dir}/api"/>
		<property name="docs.dir.js" value="${docs.dir}/js"/>
		<property name="docs.dir.templates" value="${docs.dir}/templates"/>
		<!-- This is used for importing comments from the gnu classpath file 
			into the js documentation -->
		<property name="docs.src" value="${docs.dir}/src"/>
		
		<path id="docs.sourcepath" >
			<pathelement location="${src.java}" />
			<pathelement location="${docs.src}" />
		</path>

		<path id="docs.classpath">
			<pathelement path="${target.classes}"/>
			<fileset dir="${build.lib}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${target.lib}">
				<include name="**/*.jar" />
				<exclude name="**/scriptographer*.jar" />
			</fileset>
		</path>

		<property name="scripts.dir" value="${src.js}/scripts"/>
	</target>


	<!-- =================================================================== -->
	<!-- Help on usage                                                       -->
	<!-- =================================================================== -->
	<target name="usage" description="Print usage hints">
		<echo>
Scriptographer build instructions
-------------------------------------------------------------

 available targets are:

 compile      --> compiles the source code to ./classes
 jar          --> generates the ./lib/scriptographer.jar file
 buildnumber  --> increases the buildnumber that defines the revision
 resources    --> generates the resources needed to build the native plugin code
 packages     --> generates the packages for all distributions
 jniheaders   --> generates jni headers and registerNatives.cpp in ./jni/
 jnibodies    --> generates empty jni bodies in ./jni/
 javadocs     --> generates the API docs
 jsdocs       --> generatres the JS API docs
 templatedocs --> generatres the website templates for the online JS API docs

 usage        --> provides help on using the build tool (default)

 See comments inside the build.xml file for more details.
-------------------------------------------------------------
		</echo>
	</target>


	<!-- =================================================================== -->
	<!-- Compiles the source directory                                       -->
	<!-- =================================================================== -->
	<target name="compile" depends="init">
		<mkdir dir="${target.classes}"/>
		<!-- copy the icc profiles -->
		<copy todir="${target.classes}/com/scriptographer/cmm">
			<fileset dir="${src.java}/com/scriptographer/cmm">
				<include name="**/*.icc" />
			</fileset>
		</copy>
		<!-- copy the meta resources -->
		<copy todir="${target.classes}/META-INF">
			<fileset dir="${src.java}/META-INF">
				<exclude name="**/*.in" />
			</fileset>
		</copy>
		<javac srcdir="${src.java}"
			destdir="${target.classes}"
			debug="${build.debug}"
			deprecation="${build.deprecation}"
			optimize="${build.optimize}"
			source="${build.version}"
			target="${build.version}">
			<classpath refid="target.classpath" />
			<exclude name="**/global.java"/>
		</javac>
	</target>


	<!-- =================================================================== -->
	<!-- Creates scriptographer.jar and loader.jar in the lib-directory      -->
	<!-- =================================================================== -->
	<target name="jar" depends="compile" description="Create jar files">
		<copy todir="${target.classes}/com/scriptographer/cmm">
			<fileset dir="${src.java}/com/scriptographer/cmm">
				<include name="**/*.icc" />
			</fileset>
		</copy>
		<copy todir="${target.classes}/com/scriptographer/ui/resources">
			<fileset dir="${src.java}/com/scriptographer/ui/resources">
				<include name="**/*.png" />
			</fileset>
		</copy>
		<jar jarfile="${target.lib}/${jar.name}.jar"
			basedir="${target.classes}"
			excludes="**/loader/**,**/test/**,**/jython/**"/>
		<jar jarfile="${target.java}/loader.jar"
			basedir="${target.classes}"
			includes="**/loader/**"/>
	</target>


	<!-- =================================================================== -->
	<!-- Increases the build.number by one. Execute only before publishing   -->
	<!-- a new version.                                                      -->
	<!-- =================================================================== -->
	<target name="buildnumber" depends="init"
			description="Increase build number">
		<propertyfile file="build.number"
					comment="Build Number for Scriptographer Plugin.">
			<entry  key="build.number" type="int" default="000" operation="+"
				pattern="000" />
		</propertyfile>
		<antcall target="resources" />
	</target>
	
	<target name="resources" depends="init"
			description="Generate native resrouce files">
		<property name="resources.mac" value="${build.mac}/resources" />
		<property name="resources.win" value="${build.win}/resources" />
		<property name="resources.meta" value="${src.java}/META-INF/" />
		<copy file="${resources.mac}/Info.plist.in"
			tofile="${resources.mac}/Info.plist"
			overwrite="true" />
		<replace file="${resources.mac}/Info.plist">
			<replacefilter token="@version@" value="${version}" />
			<replacefilter token="@build.number@" value="${build.number}" />
			<replacefilter token="@year@" value="${year}" />
		</replace>
		<copy file="${resources.win}/plugin.rc.in"
				tofile="${resources.win}/plugin.rc"
				overwrite="true" />
		<replace file="${resources.win}/plugin.rc">
			<replacefilter token="@version.major@" value="${version.major}" />
			<replacefilter token="@version.minor@" value="${version.minor}" />
			<replacefilter token="@build.number@" value="${build.number}" />
			<replacefilter token="@year@" value="${year}" />
		</replace>
		<copy file="${resources.meta}/services/com.scriptographer.ScriptographerEngine.in"
				tofile="${resources.meta}/services/com.scriptographer.ScriptographerEngine"
				overwrite="true" />
		<replace file="${resources.meta}/services/com.scriptographer.ScriptographerEngine">
			<replacefilter token="@version@" value="${version}" />
			<replacefilter token="@build.number@" value="${build.number}" />
		</replace>
	</target>
	
	<!-- =================================================================== -->
	<!-- Creates install packages of Scriptographer for download             -->
	<!-- =================================================================== -->
	<target name="packages" depends="jar, resources, packages.cleanup"
			description="Build and make install packages">
		<mkdir dir="${target.packages}"/>

		<!-- Clean up first, Remove everything except the archives -->
		<delete includeEmptyDirs="true">
			<fileset dir="${target.packages}">
				<exclude name="**/Scriptographer*.zip"/>
				<exclude name="**/Scriptographer*.dmg"/>
			</fileset>
		</delete>

		<mkdir dir="${target.packages}/Scriptographer"/>
		<!-- Create Empty Logs Dir -->
		<mkdir dir="${target.packages}/Scriptographer/Logs"/>
		<mkdir dir="${target.packages}/Scriptographer/Core"/>
		<mkdir dir="${target.packages}/Scriptographer/Core/Java"/>
		<copy todir="${target.packages}/Scriptographer/Core/Java">
			<fileset dir="${target.java}">
				<include name="**/loader.jar"/>
				<include name="**/${jar.name}.jar"/>
				<include name="**/js.jar"/>
				<exclude name="**/jython.jar"/>
			</fileset>
		</copy>

		<!-- JS Core -->
		<copy todir="${target.packages}/Scriptographer/Core/JavaScript">
			<fileset dir="${src.js}/core"/>
		</copy>

		<!-- JS Docs -->
		<copy todir="${target.packages}/Scriptographer/Reference">
			<fileset dir="${docs.dir.js}"/>
		</copy>

		<!-- Scripts -->
		<copy todir="${target.packages}/Scriptographer/Scripts">
			<fileset dir="${scripts.dir}">
				<exclude name="**/*.ai"/>
			</fileset>
		</copy>

		<!-- License -->
		<copy todir="${target.packages}/Scriptographer/"
				file="${docs.dir}/License.txt" />

		<!-- Packages -->
		<antcall target="packages.platform">
			<param name="target" value="CCx64"/> <!-- no spaces! --> 
			<param name="build64" value="1" />
		</antcall>
		<antcall target="packages.platform">
			<param name="target" value="CC"/>
		</antcall>
		<antcall target="packages.platform">
			<param name="target" value="CS6"/>
		</antcall>
		<antcall target="packages.platform">
			<param name="target" value="CS5"/>
		</antcall>
		<antcall target="packages.platform">
			<param name="target" value="CS4"/>
		</antcall>
		<antcall target="packages.platform">
			<param name="target" value="CS3"/>
		</antcall>
		<antcall target="packages.platform">
			<param name="target" value="CS2"/>
		</antcall>
		<antcall target="packages.platform">
			<param name="target" value="CS"/>
		</antcall>

	<antcall target="packages.cleanup" /> 
	</target>

	<target name="packages.cleanup" depends="init">
		<!-- Remove everything except the packages -->
		<delete includeEmptyDirs="true">
			<fileset dir="${target.packages}">
				<exclude name="**/Scriptographer*.zip"/>
				<exclude name="**/Scriptographer*.dmg"/>
			</fileset>
		</delete>
	</target>

	<!-- =================================================================== -->
	<!-- Platform Specific Package related Tasks for Mac and Windows         -->
	<!-- =================================================================== -->
	<target name="packages.platform"
			depends="init,packages.platform.mac,packages.platform.win">
	</target>

	<target name="packages.platform.mac" depends="init" if="build.platform.mac">
		<echo>Executing Mac specific tasks</echo>

		<!-- Build the targets -->
		<exec executable="xcodebuild" dir="${build.mac}">
			<arg value="-target"/>
			<arg value="Scriptographer ${target}"/>
			<arg line="-configuration Release"/>
		</exec>

		<!-- Make the packages -->
		<exec executable="${build.mac}/zipPackage.sh" dir="${target.packages}">
			<arg path="${build.mac}/build"/>
			<arg value="${target}"/>
			<arg value="${version}.${build.number}"/>
		</exec>
	</target>

	
	<target name="packages.platform.win" depends="init" if="build.platform.win">
		<echo>Executing Windows specific tasks for ${target}  </echo>
		<!-- Build the targets -->
		<condition property="winplatform" value="x64" else="Win32">
	    	 <isset property="build64"/>
		</condition>
		<exec executable="cmd.exe" dir="${env.VS100COMNTOOLS}..\IDE" failonerror="false">
			<arg line="/C devenv.exe"/>
			<arg value="${build.win}\Scriptographer.sln"/>
			<arg value="/build"/>
			<arg value="&quot;${target} Debug|${winplatform}&quot;"/><!--todo: !release! &  in .bat -->
			<arg value="/project"/>
			<arg value="scriptographer"/>
		</exec>	
		<echo> ${build.win}/zipPackage.bat "${target} ${version}.${build.number} in ${target.packages}  </echo>
		<!-- Make the packages -->
			<exec executable="cmd.exe" dir="${target.packages}">
			<arg value="/C"/>
			<arg path="${build.win}/zipPackage.bat"/>
			<arg path="${build.win}"/>
			<arg value="${target}"/>
			<arg value="${version}.${build.number}"/>
		</exec>
	</target>

	<!-- =================================================================== -->
	<!-- Produces header files for native JNI methods                        -->
	<!-- =================================================================== -->
	<target name="jniheaders" depends="compile"
			description="Make JNI header files">
		<mkdir dir="${src.jni}"/>
		<!-- Remove previously generated headers first, to avoid zombies -->
		<delete>
			<fileset dir="${src.jni}">
				<include name="**/*.h"/>
				<exclude name="**/aiGlobals.h"/>
				<exclude name="**/uiGlobals.h"/>
			</fileset>
		</delete>
		<javah destdir="${src.jni}" classpath="${target.classes}">
			<classpath refid="target.classpath" />

			<class name="com.scriptographer.ScriptographerEngine" />

			<class name="com.scriptographer.ai.Item" />
			<class name="com.scriptographer.ai.Path" />
			<class name="com.scriptographer.ai.PathStyle" />
			<class name="com.scriptographer.ai.SegmentList" />
			<class name="com.scriptographer.ai.Curve" />

			<class name="com.scriptographer.ai.Group" />
			<class name="com.scriptographer.ai.Raster" />
			<class name="com.scriptographer.ai.PlacedFile" />
			<class name="com.scriptographer.ai.Layer" />
			<class name="com.scriptographer.ai.LayerList" />

			<class name="com.scriptographer.ai.Document" />
			<class name="com.scriptographer.ai.DocumentList" />
			<class name="com.scriptographer.ai.DocumentView" />
			<class name="com.scriptographer.ai.DocumentViewList" />

			<class name="com.scriptographer.ai.Color" />
			<class name="com.scriptographer.ai.Dictionary" />
			<class name="com.scriptographer.ai.FileFormat" />
			<class name="com.scriptographer.ai.Pathfinder" />

			<class name="com.scriptographer.ai.Tool" />
			<class name="com.scriptographer.ai.LiveEffect" />
			<class name="com.scriptographer.ai.Annotator" />
		   	<class name="com.scriptographer.ai.Timer" />

			<class name="com.scriptographer.ai.TextItem" />
			<class name="com.scriptographer.ai.PointText" />
			<class name="com.scriptographer.ai.AreaText" />
			<class name="com.scriptographer.ai.PathText" />
			<class name="com.scriptographer.ai.TextRange" />
			<class name="com.scriptographer.ai.TextStory" />
			<class name="com.scriptographer.ai.TextStoryList" />
			<class name="com.scriptographer.ai.CharacterStyle" />
			<class name="com.scriptographer.ai.ParagraphStyle" />

			<class name="com.scriptographer.ai.FontList" />
			<class name="com.scriptographer.ai.FontFamily" />
			<class name="com.scriptographer.ai.FontWeight" />

			<class name="com.scriptographer.ai.Tracing" />
			<class name="com.scriptographer.ai.Pattern" />

			<class name="com.scriptographer.ai.Symbol" />
			<class name="com.scriptographer.ai.SymbolList" />
			<class name="com.scriptographer.ai.PlacedSymbol" />

			<class name="com.scriptographer.ai.Swatch" />
			<class name="com.scriptographer.ai.SwatchList" />

			<class name="com.scriptographer.ai.Gradient" />
			<class name="com.scriptographer.ai.GradientStopList" />

			<class name="com.scriptographer.ai.ArtboardList" />

			<class name="com.scriptographer.ui.MenuItem" />
			<class name="com.scriptographer.ui.MenuGroup" />
			<class name="com.scriptographer.ui.KeyModifiers" />

			<class name="com.scriptographer.adm.Notifier" />
			<class name="com.scriptographer.adm.Dialog" />
			<class name="com.scriptographer.adm.ModalDialog" />
			<class name="com.scriptographer.adm.Item" />
		   	<class name="com.scriptographer.adm.ValueItem" />
		   	<class name="com.scriptographer.adm.TextValueItem" />
		   	<class name="com.scriptographer.adm.TextItem" />
		   	<class name="com.scriptographer.adm.Button" />
			<class name="com.scriptographer.adm.ToggleItem" />
			<class name="com.scriptographer.adm.ItemGroup" />
		   	<class name="com.scriptographer.adm.ImagePane" />
		   	<class name="com.scriptographer.adm.TextEditItem" />

		   	<class name="com.scriptographer.adm.ListItem" />
		   	<class name="com.scriptographer.adm.ListEntry" />
		   	<class name="com.scriptographer.adm.HierarchyListBox" />
		   	<class name="com.scriptographer.adm.HierarchyListEntry" />

		   	<class name="com.scriptographer.adm.Drawer" />
		   	<class name="com.scriptographer.adm.Image" />
		   	<class name="com.scriptographer.adm.Tracker" />
		   	
		   	<!--widget-->
		   	<class name="com.scriptographer.widget.Dialog" />
			<class name="com.scriptographer.widget.Notifier" />
			<class name="com.scriptographer.widget.Item" />
		   	<class name="com.scriptographer.widget.ValueItem" />
		   	<class name="com.scriptographer.widget.TextValueItem" />
		   	<class name="com.scriptographer.widget.TextItem" />
		   	<class name="com.scriptographer.widget.Button" />
			<class name="com.scriptographer.widget.TextEditItem" />

		</javah>
		<echo id="echo" level="info" />
		<script language="javascript" src="${src.js}/jni/jni.js">
		<![CDATA[
			// create registerNatives.cpp by parsing the generated files by
			// javah, see jni.js:
			registerNatives(project.getProperty("src.jni"),
				project.getProperty("src.jni") + "/registerNatives.cpp", "adm" );
			registerNatives(project.getProperty("src.jni"),
				project.getProperty("src.jni") + "/registerWidgetNatives.cpp", "swt");
		]]>
		</script>
	</target>


	<!-- =================================================================== -->
	<!-- Produces JNI method bodies and cpp files for native JNI methods     -->
	<!-- =================================================================== -->
	<target name="jnibodies" depends="jniheaders"
			description="Make JNI body files">
		<script language="javascript" src="${src.js}/jni/jni.js">
		<![CDATA[
			// Create JNI bodies by parsing the generated files by javah,
			// see jni.js:
			createJniBodies(project.getProperty("src.jni"));
		]]>
		</script>
	</target>


	<!-- =================================================================== -->
	<!-- Creates the API documentation                                       -->
	<!-- =================================================================== -->
	<target name="javadocs" depends="init">
		<mkdir dir="${docs.dir.api}"/>
		<javadoc packagenames="com.scriptographer.*"
  				sourcepathref="docs.sourcepath"
				destdir="${docs.dir.api}"
				author="false"
				version="false"
				private="false"
				windowtitle="${Name} ${version} API"
				classpathref="target.classpath">
		    <doctitle><![CDATA[${Name} ${version}]]></doctitle>
		    <bottom><![CDATA[Copyright &#169; ${year} J&uuml;rg Lehni, <a href="http://www.scratchdisk.com" target="_blank">Scratchdisk.com</a>. All Rights Reserved.]]></bottom>
		</javadoc>
	</target>

	<!-- =================================================================== -->
	<!-- The doclet that produces both JS documentation and templates        -->
	<!-- Do not call directly, use it through jsdocs / templatedocs          -->
	<!-- =================================================================== -->
	<target name="rhinodoclet" depends="init">
		<mkdir dir="${destdir}"/>
		<!-- Set classmatch to empty if it's not defined -->
		<!-- If it's not defined, pass " " instead of "" since on Windows,
			passing "" makes ant ignore that line and assume the next line as
			classmatch which results in confusion -->
		<condition property="classmatch" value="${classmatch}" else=" ">
			<isset property="classmatch" />
		</condition>
		<!--
		<javadoc packagenames="com.scriptographer.test"
		-->
		<javadoc packagenames="java.*,com.scriptographer,com.scriptographer.ai,com.scriptographer.ui,com.scriptographer.sg,com.scratchdisk.list"
				sourcepathref="docs.sourcepath"
				destdir="${destdir}"
				author="false"
				version="false"
				public="true"
				windowtitle="${Name} ${version} API"
				classpathref="docs.classpath">
		    <doctitle><![CDATA[${Name} ${version}]]></doctitle>
			<bottom><![CDATA[Copyright &#169; ${year} J&uuml;rg Lehni, <a href="http://www.scratchdisk.com" target="_blank">Scratchdisk.com</a>. All Rights Reserved.]]></bottom>
			<doclet name="com.scratchdisk.script.rhino.RhinoDoclet"
					pathref="docs.classpath">
				<param name="-script" value="${src.js}/doclet/main.js"/>
				<param name="-basepackage" value="com.scriptographer"/>
				<param name="-classfilter" value="
					com.scriptographer.js.*
					com.scriptographer.util.*
					java.*
				"/>
				<param name="-packagesequence" value="
					com.scriptographer.ai
					com.scriptographer.ui
					com.scriptographer.sg
					com.scriptographer.test
					"/>
				<param name="-methodfilter" value="
					iterator
					hashCode
					toString
				"/>
				<param name="-classorder" value="classorder.txt"/>
				<param name="-templates" value="${templates}"/>
				<param name="-nosummaries" value="true" />
				<param name="-classmatch" value="${classmatch}" />
			</doclet>
		</javadoc>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the JS API Documentation                                    -->
	<!-- =================================================================== -->
	<target name="jsdocs" depends="init"
			description="Produce JS API Documentation">
		<mkdir dir="${docs.dir.js}/packages"/>
		<antcall target="rhinodoclet">
			<param name="templates" value="false"/>
			<param name="destdir" value="${docs.dir.js}"/>
		</antcall>
	</target>

	<!-- =================================================================== -->
	<!-- Creates the JS API documentation as Templates for the Server        -->
	<!-- =================================================================== -->
	<target name="templatedocs" depends="init"
			description="Produce JS API Server Templates">
		<antcall target="rhinodoclet">
			<param name="templates" value="true"/>
			<param name="destdir" value="${docs.dir.templates}"/>
		</antcall>
	</target>
</project>

